#####################################################################
# 	Macros
#####################################################################

[gcode_macro PRINT_START]   
variable_small_print: False
gcode:
    #Frame_Light_ON
    #Part_Light_ON
    G92 E0 
    G90                       ; Use absolute coordinates
    BED_MESH_CLEAR
    G28     
  
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set BED_MESH = params.BED_MESH|default('adaptive')|string %} ; One of: adaptive (default), full, default (or any other value as the bed mesh profile name), none
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=160               ; Pre-heat Etruder (no-drip)

    {% set area_start = params.AREA_START|default('0,0')|string %}
    {% set area_end = params.AREA_END|default('0,0')|string %}
    
    {% set start_coords = area_start.split(',')|map('float')|list %}
    {% set end_coords = area_end.split(',')|map('float')|list %}    

    {% set center_min_x = 62.5 %}                                             ; define centre area bounds
    {% set center_min_y = 62.5 %}
    {% set center_max_x = 172.5 %}
    {% set center_max_y = 172.5 %}
    
    ; Check if print is within center area
    {% if start_coords[0] >= center_min_x and start_coords[1] >= center_min_y and end_coords[0] <= center_max_x and end_coords[1] <= center_max_y %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=small_print VALUE=True
    {% else %}                                                               ; print extends beyond center, set temperatures for both beds
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=small_print VALUE=False 
    {% endif %}

    SET_BED_TEMPERATURE TARGET={BED_TEMP}                           ; Heat Bed to target temp
    BED_TEMPERATURE_WAIT MINIMUM={BED_TEMP-2} MAXIMUM={BED_TEMP+4}  ; Waits until the bed reaches close to target
    
    {% if BED_MESH == 'full' %}
    BED_MESH_CALIBRATE
    {% elif BED_MESH == 'adaptive' %}
    BED_MESH_CALIBRATE ADAPTIVE=1
    {% elif BED_MESH != 'none' %}
    BED_MESH_PROFILE LOAD={BED_MESH}
    {% endif %}
    Smart_Park
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}   ; Set and heat the final extruder temperature
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP-4} MAXIMUM={EXTRUDER_TEMP+10}  ; Wait for extruder to reach near target temperature
    LINE_PURGE                                                      ; KAMP Line Purge near print
    G92 E0                                                          ; Reset Extruder
    G1 Z2.0 F3000                                                   ; Move Z Axis up 
    M117 Printing  
    #SKEW_PROFILE LOAD=calilantern_skew_profile
    #SET_SKEW CLEAR=1



[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    
    M83
    M400                    ; wait for buffer to clear
    G1 E-5 F300
    TURN_OFF_HEATERS
    G92 E0                  ; zero the extruder
    G91                     ; Relative positioning
    G1 E-2 F2700            ; Retract a bit
    G1 X5 Y5 F3000          ; Wipe out
    G1 E-2 Z0.2 F1600       ; Retract and raise Z
    G1 Z5  F3000             ; Raise Z more
   
    G90                     ; Absolute positioning
    G1 X125 Y210              ; Present print
    
    M107                    ; turn off fan
    M84                     ; turn off steppers
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    M117
    END_TUNE                ; Print End Beeper Jingle




#############################################################################
#   Pause, Resume & Cancel Macros
#############################################################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro M600]
description: Pause for colour change
gcode:
  PAUSE
  UNLOAD_FILAMENT
